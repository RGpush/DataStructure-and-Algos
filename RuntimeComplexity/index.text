Run Time Complexity

--> Describe the performance of the algorithm
--> How much more processing power/time is required to run an algorithm if we double the inputs?


--> No matter how many elements we are working with the algorithm/operation/whatever will always take the same amount of time.. --> its Constant Time complexity.

--> if doubling the number of elements you are iterating over doesn't double the amount of work, assume that search operations are log(n).--> its logarithmic time complexity.


--> if there is a direct one to one relationship between the number of input elements that we got into our algorithm and the amount of work that we had to use to process it. Assume for loop scanning 0 to array.length, you probably have n time complexity--> its liner runtime



--> An increase in 'n' by one we had to way, way more stuff, or (n*n) things in total. --> its N^2 i.e Quadratic Time


--> if you add a single element to a collection, the processing power requires double. --> its 2^N time complexity.

Big 'O' Notation
O(n)  --> Linear
O(1)  --> Constant
O(n^2) -> Quadratic


Tips:
Identifying Runtime complexity educated guess:-

iterating  with a simple for loop through a single Collection. ---> probably O(n)
iterating  through half a Collection. ---> still O(n) there are no constants in Runtime.

iterating  through two different Collections with separate for loop. ---> probably O(n + m)

Two nested for loops iterating over the same collection ---> O(n^2)
Two nested for loops iterating over the different collection ---> O(n*m)

Sorting --> O(n*log(n))

Searching a sorted array --> O(log(n))


